REB = round(REB / GP,2),
STL = round(STL / GP,2),
BLK = round(BLK / GP,2),
TOV = round(TOV / GP,2))
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
# Calcular la matriz de correlación
cor_matrix <- cor(selected_vars_pca, use = "complete.obs")
# Visualización de la matriz de correlación
corrplot(cor_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45, addCoef.col = "black",
col = colorRampPalette(c("blue", "white", "red"))(200),
tl.cex = 1, # Ajusta el tamaño del texto de las etiquetas
number.cex = 0.6, # Ajusta el tamaño de los números
cl.cex = 1.2, # Ajusta el tamaño de la leyenda
mar = c(0, 0, 1, 0), # Ajusta los márgenes
is.corr = TRUE) # Indica que es una matriz de correlación
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
pca_model <- prcomp(selected_vars_pca,scale=TRUE)
summary(pca_model)
View(pca_model)
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
pca_model <- prcomp(selected_vars_pca,scale=TRUE)
scree_plot <- fviz_eig(pca_model, addlabels = TRUE, ylim = c(0, 50))
scree_plot
pca_model$rotation
pca_model$rotation[,1:3]
componentes <-  pca_model$rotation[,1:3]
kable(componentes, digits = 2)
View(pca_model)
library(readxl)
library(tidyverse)
library(knitr)
library(FactoMineR)
library(factoextra)
library(corrplot)
Df_Player <- read_excel("BBDD_Player.xlsx")
# Filtrado dado las condiciones del trabajo
Df_Player <- Df_Player %>% filter(GP >= max(GP)/2 & MIN/GP >= 8 & Season == "2023-24")
# Crear la nueva variable Age_Group
Df_Player <- Df_Player %>%
mutate(Age_Group = cut(Age,
breaks = c(min(Df_Player$Age), 25, 30, max(Df_Player$Age)),
labels =  c("Young Player", "Mid-Age Player", "Veteran Player"),
include.lowest = TRUE))
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
# Selección de variables para el PCA
Df_Player_PCA <- Df_Player %>%
select(Player, GP , PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
Df_Player_PCA <- Df_Player_PCA %>%
mutate(
PTS = round(PTS / GP,2),
AST = round(AST / GP,2),
REB = round(REB / GP,2),
STL = round(STL / GP,2),
BLK = round(BLK / GP,2),
TOV = round(TOV / GP,2))
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
# Calcular la matriz de correlación
cor_matrix <- cor(selected_vars_pca, use = "complete.obs")
# Visualización de la matriz de correlación
corrplot(cor_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45, addCoef.col = "black",
col = colorRampPalette(c("blue", "white", "red"))(200),
tl.cex = 0.7,
number.cex = 0.6,
cl.cex = 1.2,
mar = c(0, 0, 1, 0),
is.corr = TRUE)
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
pca_model <- prcomp(selected_vars_pca,scale=TRUE)
scree_plot <- fviz_eig(pca_model, addlabels = TRUE, ylim = c(0, 50))
scree_plot
pca_model$x
predict(pca_model)
pca_model$rotation
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
pca_model <- princomp(selected_vars_pca,scale=TRUE)
scree_plot <- fviz_eig(pca_model, addlabels = TRUE, ylim = c(0, 50))
scree_plot
View(pca_model)
pca_model$scores
# Obtener las puntuaciones de los componentes principales
pca_scores <- as.data.frame(pca_model$scores)
# Verificar los loadings (vectores propios)
loadings <- pca_model$loadings
# Calcular la nueva variable artificial como una combinación ponderada de los tres primeros componentes principales
Rendimiento <- pca_scores[, 1] * loadings[, 1] + pca_scores[, 2] * loadings[, 2] + pca_scores[, 3] * loadings[, 3]
print(Rendimiento)
pca_scores[, 1]
loadings[, 1]
?princomp
View(pca_model)
pca_model$sdev
eigen_values <- cov(selected_vars_pca)
eigen_values
eigen_values <- eigen(cov(selected_vars_pca))
View(eigen_values)
eigen_values$values
?scale
eigen_values <- eigen(cov(scale(selected_vars_pca)))
eigen_values$values
sum(eigen_values$values)
pca_model$loadings
pca_model$loadings[, 1:3]
pca_model$loadings
View(pca_model)
pca_model[["loadings"]]
pca_model$loadings[1]
pca_model$loadings[,1]
pca_model$loadings[,c(1,2)]
eigen_values$values[1]
pca_model$rotation
pca_model$loadings
?princomp
componentes <-  pca_model$loadings[,1:3]
kable(componentes, digits = 2)
# Obtener las puntuaciones de los componentes principales
pca_scores <- as.data.frame(pca_model$scores)
# Calcular la nueva variable artificial como una combinación ponderada de los tres primeros componentes principales
Rendimiento <- pca_scores[, 1] * eigen_values$values[1] + pca_scores[, 2] * eigen_values$values[2] + pca_scores[, 3] * eigen_values$values[3]
# Crear un nuevo data frame con las variables deseadas
Df_Player_Cluster <- DfPlayerNBA %>%
select(Player, Position, Age_Group, Age) %>%
mutate(PC1 = pca_scores[, 1],
PC2 = pca_scores[, 2],
PC3 = pca_scores[, 3],
Rendimiento = Rendimiento)
# Obtener las puntuaciones de los componentes principales
pca_scores <- as.data.frame(pca_model$scores)
# Calcular la nueva variable artificial como una combinación ponderada de los tres primeros componentes principales
Rendimiento <- pca_scores[, 1] * eigen_values$values[1] + pca_scores[, 2] * eigen_values$values[2] + pca_scores[, 3] * eigen_values$values[3]
# Crear un nuevo data frame con las variables deseadas
Df_Player_Cluster <- Df_Player %>%
select(Player, Position, Age_Group, Age) %>%
mutate(PC1 = pca_scores[, 1],
PC2 = pca_scores[, 2],
PC3 = pca_scores[, 3],
Rendimiento = Rendimiento)
View(Df_Player_Cluster)
summary(Df_Player_Cluster$Rendimiento)
# Obtener las puntuaciones de los componentes principales
pca_scores <- as.data.frame(pca_model$scores)
# Calcular la nueva variable artificial como una combinación ponderada de los tres primeros componentes principales
Rendimiento <- pca_scores[, 1] * eigen_values$values[1] + pca_scores[, 2] * eigen_values$values[2] + pca_scores[, 3] * eigen_values$values[3]
# Crear un nuevo data frame con las variables deseadas
Df_Player_Cluster <- Df_Player %>%
select(Player, Position, Age_Group, Age) %>%
mutate(PC1 = pca_scores[, 1],
PC2 = pca_scores[, 2],
PC3 = pca_scores[, 3],
Rendimiento = Rendimiento)
summary_stats_rendimiento <- Df_Player_Cluster %>%
summarise(
N          = n(),
Media      = mean(Rendimiento),
D.Estándar = sd(Rendimiento),
Min        = min(Rendimiento),
Max        = max(Rendimiento),
Q1         = quantile(Rendimiento, 0.25),
Mediana    = median(Rendimiento),
Q3         = quantile(Rendimiento, 0.75)
)
kable(summary_stats_rendimiento, digits = 2)
View(Df_Player_Cluster)
# Cargar la data Iris
DfIris <- iris
cor(DfIris)
cor(DfIris[, 2:])
cor(DfIris[, 2:5])
cor(DfIris[, 1:4])
# Ajustar un modelo de regresión lineal simple: Sepal.Length (variable dependiente) ~ Sepal.Width (variable independiente)
modelo <- lm(Sepal.Length ~ Sepal.Width, data = DfIris)
# Resumen del modelo
summary(modelo)
cor(DfIris[, 1:4])
# Ajustar un modelo de regresión lineal simple: Sepal.Length (variable dependiente) ~ Sepal.Width (variable independiente)
modelo <- lm(Sepal.Length ~ Petal.Length, data = DfIris)
# Resumen del modelo
summary(modelo)
# Graficar la recta de regresión
plot(iris$Sepal.Width, iris$Sepal.Length, main = "Regresión Lineal Simple: Sepal.Length vs Sepal.Width",
xlab = "Sepal.Width", ylab = "Sepal.Length")
library(tidyverse)
library(tidyverse)
library(ggplot2)
library(ggplot2)
install.packages("rlang")
install.packages("rlang")
library(ggplot2)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(ggplot2)
ggplot(data = Dfiris, aes(x = Petal.Length, y = Sepal.Length)) +
geom_point(color = "blue", size = 2) +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Regresión Lineal Simple: Sepal Length vs Petal Length",
x = "Petal Length",
y = "Sepal Length") +
theme_minimal()
ggplot(data = DfIris, aes(x = Petal.Length, y = Sepal.Length)) +
geom_point(color = "blue", size = 2) +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Regresión Lineal Simple: Sepal Length vs Petal Length",
x = "Petal Length",
y = "Sepal Length") +
theme_minimal()
# Cargar la data Iris
DfIris <- iris
cor(DfIris[, 1:4])
# Ajustar un modelo de regresión lineal simple: Sepal.Length (variable dependiente) ~ Petal.Length (variable independiente)
modelo <- lm(Sepal.Length ~ Petal.Length, data = DfIris)
# Resumen del modelo
summary(modelo)
library(cluster)
library(FactoMineR)
library(factoextra)
# Calcular la matriz de distancias
dist_matrix <- dist(Df_Player_Cluster[,c("PC1", "PC2", "PC3", "Rendimiento", "Age")], method = "euclidean")
# Aplicar el método de average linkage
hclust_avg <- hclust(dist_matrix, method = "average")
# Aplicar el método de Ward
hclust_ward <- hclust(dist_matrix, method = "ward.D2")
# Visualizar los dendrogramas
par(mfrow = c(1, 2))
plot(hclust_avg, main = "Dendrograma - Average Linkage", xlab = "", sub = "", cex = 0.9)
plot(hclust_ward, main = "Dendrograma - Ward's Method", xlab = "", sub = "", cex = 0.9)
# Visualizar los dendrogramas
#par(mfrow = c(1, 2))
plot(hclust_avg, main = "Dendrograma - Average Linkage", xlab = "", sub = "", cex = 0.9)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(dplyr)
library(ggplot2)
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(dplyr)
library(ggplot2)
plot(hc_average, labels = FALSE, main = "Dendrograma con Average Linkage")
plot(hclust_avg, labels = FALSE, main = "Dendrograma con Average Linkage")
getRversion()
library(MASS)
library(readxl)
library(tidyverse)
library(knitr)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(cluster)
library(mclust)
library(MASS)
Df_Player <- read_excel("BBDD_Player.xlsx")
# Filtrado dado las condiciones del trabajo
Df_Player <- Df_Player %>% filter(GP >= max(GP)/2 & MIN/GP >= 8 & Season == "2023-24")
# Crear la nueva variable Age_Group
Df_Player <- Df_Player %>%
mutate(Age_Group = cut(Age,
breaks = c(min(Df_Player$Age), 25, 30, max(Df_Player$Age)),
labels =  c("Young Player", "Mid-Age Player", "Veteran Player"),
include.lowest = TRUE))
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
# Selección de variables para el PCA
Df_Player_PCA <- Df_Player %>%
select(Player, GP , PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
Df_Player_PCA <- Df_Player_PCA %>%
mutate(
PTS = round(PTS / GP,2),
AST = round(AST / GP,2),
REB = round(REB / GP,2),
STL = round(STL / GP,2),
BLK = round(BLK / GP,2),
TOV = round(TOV / GP,2))
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
# Calcular la matriz de correlación
cor_matrix <- cor(selected_vars_pca, use = "complete.obs")
# Visualización de la matriz de correlación
corrplot(cor_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45, addCoef.col = "black",
col = colorRampPalette(c("blue", "white", "red"))(200),
tl.cex = 0.7,
number.cex = 0.6,
cl.cex = 1.2,
mar = c(0, 0, 1, 0),
is.corr = TRUE)
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
## Autovalores
eigen_values <- eigen(cov(scale(selected_vars_pca)))
pca_model <- princomp(selected_vars_pca,scale=TRUE)
scree_plot <- fviz_eig(pca_model, addlabels = TRUE, ylim = c(0, 50))
scree_plot
# Obtener las puntuaciones de los componentes principales
pca_scores <- as.data.frame(pca_model$scores)
# Calcular la nueva variable artificial como una combinación ponderada de los tres primeros componentes principales
Rendimiento <- pca_scores[, 1] * eigen_values$values[1] + pca_scores[, 2] * eigen_values$values[2] + pca_scores[, 3] * eigen_values$values[3]
# Crear un nuevo data frame con las variables deseadas
Df_Player_Cluster <- Df_Player %>%
select(Player, Position, Age_Group, Age) %>%
mutate(PC1 = pca_scores[, 1],
PC2 = pca_scores[, 2],
PC3 = pca_scores[, 3],
Rendimiento = Rendimiento)
summary_stats_rendimiento <- Df_Player_Cluster %>%
summarise(
N          = n(),
Media      = mean(Rendimiento),
D.Estándar = sd(Rendimiento),
Min        = min(Rendimiento),
Max        = max(Rendimiento),
Q1         = quantile(Rendimiento, 0.25),
Mediana    = median(Rendimiento),
Q3         = quantile(Rendimiento, 0.75)
)
kable(summary_stats_rendimiento, digits = 2)
gm_model <- Mclust(scale(Df_Player_Cluster[,c("PC1", "PC2", "PC3", "Rendimiento")]), G = 3)
Df_Player_Cluster$GM <- gm_model$classification
fviz_cluster(gm_model, data = scale(Df_Player_Cluster[,c("PC1", "PC2", "PC3", "Rendimiento")]), ellipse.type = "convex",
palette = "jco", ggtheme = theme_classic()) +
labs(title = "Modelo de Mezcla Gaussiana", x= "", y="") +
theme(legend.position = "none")
Df_Player_Cluster$GM <- as.factor(Df_Player_Cluster$GM)
lda_model <- lda(GM ~ PC1 + PC2 + PC3 + Rendimiento + Age, data = Df_Player_Cluster)
summary(lda_model)
Df_Player_Cluster$GM <- as.factor(Df_Player_Cluster$GM)
lda_model <- lda(GM ~ PC1 + PC2 + PC3 + Rendimiento + Age, data = Df_Player_Cluster)
summary(lda_model)
lda_model$means
library(readxl)
library(tidyverse)
library(knitr)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(cluster)
library(mclust)
library(MASS)
Df_Player <- read_excel("BBDD_Player.xlsx")
# Filtrado dado las condiciones del trabajo
Df_Player <- Df_Player %>% filter(GP >= max(GP)/2 & MIN/GP >= 8 & Season == "2023-24")
# Crear la nueva variable Age_Group
Df_Player <- Df_Player %>%
mutate(Age_Group = cut(Age,
breaks = c(min(Df_Player$Age), 25, 30, max(Df_Player$Age)),
labels =  c("Young Player", "Mid-Age Player", "Veteran Player"),
include.lowest = TRUE))
# Selección de variables para el PCA
Df_Player_PCA <- Df_Player %>%
select(Player, GP , PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
library(readxl)
library(tidyverse)
library(knitr)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(cluster)
library(mclust)
library(MASS)
Df_Player <- read_excel("BBDD_Player.xlsx")
Df_Player <- Df_Player %>% filter(GP >= max(GP)/2 & MIN/GP >= 8 & Season == "2023-24")
Df_Player <- Df_Player %>%
mutate(Age_Group = cut(Age,
breaks = c(min(Df_Player$Age), 25, 30, max(Df_Player$Age)),
labels =  c("Young Player", "Mid-Age Player", "Veteran Player"),
include.lowest = TRUE))
# Estadisticas descriptivas PIE por posicion
summary_stats_pie <- Df_Player %>%
group_by(Position) %>%
summarise(
N          = n(),
Media      = mean(PIE),
D.Estándar = sd(PIE),
Min        = min(PIE),
Max        = max(PIE),
Q1         = quantile(PIE, 0.25),
Mediana    = median(PIE),
Q3         = quantile(PIE, 0.75)
)
library(readxl)
library(tidyverse)
library(knitr)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(cluster)
library(mclust)
Df_Player <- read_excel("BBDD_Player.xlsx")
# Filtrado dado las condiciones del trabajo
Df_Player <- Df_Player %>% filter(GP >= max(GP)/2 & MIN/GP >= 8 & Season == "2023-24")
# Crear la nueva variable Age_Group
Df_Player <- Df_Player %>%
mutate(Age_Group = cut(Age,
breaks = c(min(Df_Player$Age), 25, 30, max(Df_Player$Age)),
labels =  c("Young Player", "Mid-Age Player", "Veteran Player"),
include.lowest = TRUE))
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
# Selección de variables para el PCA
Df_Player_PCA <- Df_Player %>%
select(Player, GP , PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
library(readxl)
library(tidyverse)
library(knitr)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(cluster)
library(mclust)
Df_Player <- read_excel("BBDD_Player.xlsx")
# Filtrado dado las condiciones del trabajo
Df_Player <- Df_Player %>% filter(GP >= max(GP)/2 & MIN/GP >= 8 & Season == "2023-24")
# Crear la nueva variable Age_Group
Df_Player <- Df_Player %>%
mutate(Age_Group = cut(Age,
breaks = c(min(Df_Player$Age), 25, 30, max(Df_Player$Age)),
labels =  c("Young Player", "Mid-Age Player", "Veteran Player"),
include.lowest = TRUE))
# Selección de variables para el PCA
Df_Player_PCA <- Df_Player %>%
select(Player, GP , PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
Df_Player_PCA <- Df_Player_PCA %>%
mutate(
PTS = round(PTS / GP,2),
AST = round(AST / GP,2),
REB = round(REB / GP,2),
STL = round(STL / GP,2),
BLK = round(BLK / GP,2),
TOV = round(TOV / GP,2))
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
# Calcular la matriz de correlación
cor_matrix <- cor(selected_vars_pca, use = "complete.obs")
# Visualización de la matriz de correlación
corrplot(cor_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45, addCoef.col = "black",
col = colorRampPalette(c("blue", "white", "red"))(200),
tl.cex = 0.7,
number.cex = 0.6,
cl.cex = 1.2,
mar = c(0, 0, 1, 0),
is.corr = TRUE)
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
## Autovalores
eigen_values <- eigen(cov(scale(selected_vars_pca)))
pca_model <- princomp(selected_vars_pca,scale=TRUE)
scree_plot <- fviz_eig(pca_model, addlabels = TRUE, ylim = c(0, 50))
scree_plot
# Obtener las puntuaciones de los componentes principales
pca_scores <- as.data.frame(pca_model$scores)
# Calcular la nueva variable artificial como una combinación ponderada de los tres primeros componentes principales
Rendimiento <- pca_scores[, 1] * eigen_values$values[1] + pca_scores[, 2] * eigen_values$values[2] + pca_scores[, 3] * eigen_values$values[3]
# Crear un nuevo data frame con las variables deseadas
Df_Player_Cluster <- Df_Player %>%
select(Player, Position, Age_Group, Age) %>%
mutate(PC1 = pca_scores[, 1],
PC2 = pca_scores[, 2],
PC3 = pca_scores[, 3],
Rendimiento = Rendimiento)
summary_stats_rendimiento <- Df_Player_Cluster %>%
summarise(
N          = n(),
Media      = mean(Rendimiento),
D.Estándar = sd(Rendimiento),
Min        = min(Rendimiento),
Max        = max(Rendimiento),
Q1         = quantile(Rendimiento, 0.25),
Mediana    = median(Rendimiento),
Q3         = quantile(Rendimiento, 0.75)
)
kable(summary_stats_rendimiento, digits = 2)
set.seed(35) # Fijar la semilla para reproducibilidad
kmeans_model <- kmeans(scale(Df_Player_Cluster[,c("PC1", "PC2", "PC3", "Rendimiento")]), centers = 3, nstart = 35)
Df_Player_Cluster$Cluster <- kmeans_model$cluster
fviz_cluster(kmeans_model, data = scale(Df_Player_Cluster[,c("PC1", "PC2", "PC3", "Rendimiento")]),
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_classic()) + labs(title="Modelo K-means", x= "", y ="") +
theme(legend.position = "none")
gm_model <- Mclust(scale(Df_Player_Cluster[,c("PC1", "PC2", "PC3", "Rendimiento")]), G = 3)
Df_Player_Cluster$GM <- gm_model$classification
fviz_cluster(gm_model, data = scale(Df_Player_Cluster[,c("PC1", "PC2", "PC3", "Rendimiento")]), ellipse.type = "convex",
palette = "jco", ggtheme = theme_classic()) +
labs(title = "Modelo de Mezcla Gaussiana", x= "", y="") +
theme(legend.position = "none")
library(MASS)
Df_Player_Cluster$GM <- as.factor(Df_Player_Cluster$GM)
lda_model <- lda(GM ~ PC1 + PC2 + PC3 + Rendimiento + Age, data = Df_Player_Cluster)
kable(lda_model$means, digits = 2)
# Predicciones del modelo LDA
lda_predictions <- predict(lda_model)
# Matriz de confusión para evaluar el rendimiento del modelo
confusion_matrix <- table(Predicted = lda_predictions$class, Actual = Df_Player_Cluster$Cluster)
confusion_matrix
