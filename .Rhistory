D.Estándar = sd(PIE),
Min        = min(PIE),
Max        = max(PIE),
Q1         = quantile(PIE, 0.25),
Mediana    = median(PIE),
Q3         = quantile(PIE, 0.75),
.groups = 'drop'
)
kable(summary_stats_pie_age_position, digits = 2)
summary_stats_pie_age_position <- Df_Player %>%
group_by(Age_Group, Position) %>%
summarise(
N          = n(),
Media      = mean(PIE),
D.Estándar = sd(PIE),
Min        = min(PIE),
Max        = max(PIE),
Q1         = quantile(PIE, 0.25),
Mediana    = median(PIE),
Q3         = quantile(PIE, 0.75),
.groups = 'drop'
)
kable(summary_stats_pie_age_position, digits = 2)
# Estadisticas descriptivas PIE por posicion
summary_stats_usg <- Df_Player %>%
group_by(Position) %>%
summarise(
N          = n(),
Media      = mean(`USG%`),
D.Estándar = sd(`USG%`),
Min        = min(`USG%`),
Max        = max(`USG%`),
Q1         = quantile(`USG%`, 0.25),
Mediana    = median(`USG%`),
Q3         = quantile(`USG%`, 0.75)
)
kable(summary_stats_usg, digits = 2)
# Estadisticas descriptivas PIE por posicion
summary_stats_usg <- Df_Player %>%
group_by(Position) %>%
summarise(
N          = n(),
Media      = mean(`USG%`),
D.Estándar = sd(`USG%`),
Min        = min(`USG%`),
Max        = max(`USG%`),
Q1         = quantile(`USG%`, 0.25),
Mediana    = median(`USG%`),
Q3         = quantile(`USG%`, 0.75)
)
kable(summary_stats_usg, digits = 2)
boxplot_usg_age <- ggplot(Df_Player, aes(x = Position, y = `USG%`)) +
geom_boxplot(color = "darkblue") +
labs(
title = "",
x = "",
y = "USG%"
) +
theme_classic()
boxplot_usg_age
boxplot_usg_age <- ggplot(Df_Player, aes(x = Position, y = `USG%`)) +
geom_boxplot(color = "darkblue") +
labs(
title = "",
x = "",
y = "USG%"
) +
theme_classic()
boxplot_usg_age
# Estadisticas descriptivas USG% por edad
summary_stats_usg_age <- Df_Player %>%
group_by(Age_Group) %>%
summarise(
N          = n(),
Media      = mean(`USG%`),
D.Estándar = sd(`USG%`),
Min        = min(`USG%`),
Max        = max(`USG%`),
Q1         = quantile(`USG%`, 0.25),
Mediana    = median(`USG%`),
Q3         = quantile(`USG%`, 0.75)
)
kable(summary_stats_usg_age, digits = 2)
# Estadisticas descriptivas USG% por edad
summary_stats_usg_age <- Df_Player %>%
group_by(Age_Group) %>%
summarise(
N          = n(),
Media      = mean(`USG%`),
D.Estándar = sd(`USG%`),
Min        = min(`USG%`),
Max        = max(`USG%`),
Q1         = quantile(`USG%`, 0.25),
Mediana    = median(`USG%`),
Q3         = quantile(`USG%`, 0.75)
)
kable(summary_stats_usg_age, digits = 2)
boxplot_usg_age <- ggplot(Df_Player, aes(x = Age_Group, y = `USG%`)) +
geom_boxplot(color = "darkblue") +
labs(
title = "",
x = "",
y = "USG%"
) +
theme_classic()
boxplot_usg_age
# Estadisticas descriptivas USG% por edad y posicion
summary_stats_usg_age_position <- Df_Player %>%
group_by(Age_Group, Position) %>%
summarise(
N          = n(),
Media      = mean(`USG%`),
D.Estándar = sd(`USG%`),
Min        = min(`USG%`),
Max        = max(`USG%`),
Q1         = quantile(`USG%`, 0.25),
Mediana    = median(`USG%`),
Q3         = quantile(`USG%`, 0.75),
.groups = 'drop'
)
kable(summary_stats_usg_age_position, digits = 2)
# Estadisticas descriptivas USG% por edad y posicion
summary_stats_usg_age_position <- Df_Player %>%
group_by(Age_Group, Position) %>%
summarise(
N          = n(),
Media      = mean(`USG%`),
D.Estándar = sd(`USG%`),
Min        = min(`USG%`),
Max        = max(`USG%`),
Q1         = quantile(`USG%`, 0.25),
Mediana    = median(`USG%`),
Q3         = quantile(`USG%`, 0.75),
.groups = 'drop'
)
kable(summary_stats_usg_age_position, digits = 2)
install.packages("MVN")
library(MVN)
Df_Player_Manova <- Df_Player %>% select(Player, Age, Age_Group, Position, `USG%`)
mvn(Df_Player_Manova[,4:], mvnTest = "royston")
mvn(Df_Player_Manova[,4:5], mvnTest = "royston")
Df_Player_Manova <- Df_Player %>% select(Player, Age, Age_Group, Position, PIE, `USG%`)
mvn(Df_Player_Manova[,5:6], mvnTest = "royston")
mvn(Df_Player_Manova[,5:6], mvnTest = "hz")
library(readxl)
library(tidyverse)
install.packages("readr")
library(readxl)
library(tidyverse)
install.packages("timechange")
library(readxl)
library(tidyverse)
library(knitr)
Df_Player <- read_excel("BBDD_Player.xlsx")
# Filtrado dado las condiciones del trabajo
Df_Player <- Df_Player %>% filter(GP >= max(GP)/2 & MIN/GP >= 8)
# Crear la nueva variable Age_Group
Df_Player <- Df_Player %>%
mutate(Age_Group = cut(Age,
breaks = c(min(Df_Player$Age), 25, 30, max(Df_Player$Age)),
labels =  c("Young Player", "Mid-Age Player", "Veteran Player"),
include.lowest = TRUE))
# Convertir Position y Age_Group a factores
Df_Player$Position  <- as.factor(Df_Player$Position)
Df_Player$Age_Group <- as.factor(Df_Player$Age_Group)
# Crear un modelo MANOVA
manova_model <- manova(cbind(PIE, USG) ~ Position * Age_Group, data = Df_Player)
# Convertir Position y Age_Group a factores
Df_Player$Position  <- as.factor(Df_Player$Position)
Df_Player$Age_Group <- as.factor(Df_Player$Age_Group)
# Crear un modelo MANOVA
manova_model <- manova(cbind(PIE, `USG%`) ~ Position * Age_Group, data = Df_Player)
summary(manova_model)
# Convertir Position y Age_Group a factores
Df_Player$Position  <- as.factor(Df_Player$Position)
Df_Player$Age_Group <- as.factor(Df_Player$Age_Group)
# Crear un modelo MANOVA
manova_model <- manova(cbind(PIE, `USG%`) ~ Position * Age_Group, data = Df_Player)
kable(summary(manova_model))
# Convertir Position y Age_Group a factores
Df_Player$Position  <- as.factor(Df_Player$Position)
Df_Player$Age_Group <- as.factor(Df_Player$Age_Group)
# Crear un modelo MANOVA
manova_model <- manova(cbind(PIE, `USG%`) ~ Position * Age_Group, data = Df_Player)
summary(manova_model)$stats
# Convertir Position y Age_Group a factores
Df_Player$Position  <- as.factor(Df_Player$Position)
Df_Player$Age_Group <- as.factor(Df_Player$Age_Group)
# Crear un modelo MANOVA
manova_model <- manova(cbind(PIE, `USG%`) ~ Position * Age_Group, data = Df_Player)
kable(summary(manova_model)$stats, digits = 2)
colnames(Df_Player)
View(Df_Player)
library(readxl)
library(tidyverse)
library(knitr)
Df_Player <- read_excel("BBDD_Player.xlsx")
# Filtrado dado las condiciones del trabajo
Df_Player <- Df_Player %>% filter(GP >= max(GP)/2 & MIN/GP >= 8 & Season == "2023-24")
# Crear la nueva variable Age_Group
Df_Player <- Df_Player %>%
mutate(Age_Group = cut(Age,
breaks = c(min(Df_Player$Age), 25, 30, max(Df_Player$Age)),
labels =  c("Young Player", "Mid-Age Player", "Veteran Player"),
include.lowest = TRUE))
# Convertir Position y Age_Group a factores
Df_Player$Position  <- as.factor(Df_Player$Position)
Df_Player$Age_Group <- as.factor(Df_Player$Age_Group)
# Crear un modelo MANOVA
manova_model <- manova(cbind(PIE, `USG%`) ~ Position * Age_Group, data = Df_Player)
kable(summary(manova_model)$stats, digits = 2)
summary(manova_model)$stats
# Convertir Position y Age_Group a factores
Df_Player$Position  <- as.factor(Df_Player$Position)
Df_Player$Age_Group <- as.factor(Df_Player$Age_Group)
# Crear un modelo MANOVA
manova_model <- manova(cbind(PIE, `USG%`) ~ Position * Age_Group, data = Df_Player)
kable(summary(manova_model)$stats, digits = 2)
install.packages("MVN")
install.packages("MVN")
residuals(manova_model)
mvn(data = residuals(manova_model), mvnTest = "hz")
library(MVN)
mvn(data = residuals(manova_model), mvnTest = "hz")
mvn(data = c(Df_Player$PIE, Df_Player$`USG%`), mvnTest = "hz")
mvn(data = Df_Player[, c("PIE", "`USG%`")], mvnTest = "hz")
colnames(Df_Player)
library(FactoMineR)
install.packages("FactoMineR")
library("factoextra")
install.packages("factoextra")
library(FactoMineR)
library(factoextra)
View(Df_Player)
# Selección de variables para el PCA
Df_Player_PCA <- Df_Player %>%
select(Player, PTS, AST, REB, STL, BLK, TOV, FG., X3P., FT., USG., PIE, TS., EFG.)
colnames(Df_Player)
# Selección de variables para el PCA
Df_Player_PCA <- Df_Player %>%
select(Player, GP , PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
# Estandarización de los datos
Df_Player_PCA <- scale(Df_Player_PCA)
Df_Player_PCA <- Df_Player_PCA %>%
mutate(
PTS = round(PTS / GP,2),
AST = round(AST / GP,2),
REB = round(REB / GP,2),
STL = round(STL / GP,2),
BLK = round(BLK / GP,2),
TOV = round(TOV / GP,2))
View(Df_Player_PCA)
library(corrplot)
# Selección de variables para el PCA
Df_Player_PCA <- Df_Player %>%
select(Player, GP , PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
Df_Player_PCA <- Df_Player_PCA %>%
mutate(
PTS = round(PTS / GP,2),
AST = round(AST / GP,2),
REB = round(REB / GP,2),
STL = round(STL / GP,2),
BLK = round(BLK / GP,2),
TOV = round(TOV / GP,2))
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
# Calcular la matriz de correlación
cor_matrix <- cor(selected_vars, use = "complete.obs")
# Selección de variables para el PCA
Df_Player_PCA <- Df_Player %>%
select(Player, GP , PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
Df_Player_PCA <- Df_Player_PCA %>%
mutate(
PTS = round(PTS / GP,2),
AST = round(AST / GP,2),
REB = round(REB / GP,2),
STL = round(STL / GP,2),
BLK = round(BLK / GP,2),
TOV = round(TOV / GP,2))
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
# Calcular la matriz de correlación
cor_matrix <- cor(selected_vars_pca, use = "complete.obs")
# Visualización de la matriz de correlación
corrplot(cor_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45, addCoef.col = "black",
col = colorRampPalette(c("blue", "white", "red"))(200))
# Selección de variables para el PCA
Df_Player_PCA <- Df_Player %>%
select(Player, GP , PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
Df_Player_PCA <- Df_Player_PCA %>%
mutate(
PTS = round(PTS / GP,2),
AST = round(AST / GP,2),
REB = round(REB / GP,2),
STL = round(STL / GP,2),
BLK = round(BLK / GP,2),
TOV = round(TOV / GP,2))
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
# Calcular la matriz de correlación
cor_matrix <- cor(selected_vars_pca, use = "complete.obs")
# Visualización de la matriz de correlación
corrplot(cor_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45, addCoef.col = "black",
col = colorRampPalette(c("blue", "white", "red"))(200),
tl.cex = 1.2, # Ajusta el tamaño del texto de las etiquetas
number.cex = 1.2, # Ajusta el tamaño de los números
cl.cex = 1.2, # Ajusta el tamaño de la leyenda
mar = c(0, 0, 1, 0), # Ajusta los márgenes
is.corr = TRUE) # Indica que es una matriz de correlación
# Selección de variables para el PCA
Df_Player_PCA <- Df_Player %>%
select(Player, GP , PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
Df_Player_PCA <- Df_Player_PCA %>%
mutate(
PTS = round(PTS / GP,2),
AST = round(AST / GP,2),
REB = round(REB / GP,2),
STL = round(STL / GP,2),
BLK = round(BLK / GP,2),
TOV = round(TOV / GP,2))
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
# Calcular la matriz de correlación
cor_matrix <- cor(selected_vars_pca, use = "complete.obs")
# Visualización de la matriz de correlación
corrplot(cor_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45, addCoef.col = "black",
col = colorRampPalette(c("blue", "white", "red"))(200),
tl.cex = 0.6, # Ajusta el tamaño del texto de las etiquetas
number.cex = 1.2, # Ajusta el tamaño de los números
cl.cex = 1.2, # Ajusta el tamaño de la leyenda
mar = c(0, 0, 1, 0), # Ajusta los márgenes
is.corr = TRUE) # Indica que es una matriz de correlación
# Selección de variables para el PCA
Df_Player_PCA <- Df_Player %>%
select(Player, GP , PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
Df_Player_PCA <- Df_Player_PCA %>%
mutate(
PTS = round(PTS / GP,2),
AST = round(AST / GP,2),
REB = round(REB / GP,2),
STL = round(STL / GP,2),
BLK = round(BLK / GP,2),
TOV = round(TOV / GP,2))
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
# Calcular la matriz de correlación
cor_matrix <- cor(selected_vars_pca, use = "complete.obs")
# Visualización de la matriz de correlación
corrplot(cor_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45, addCoef.col = "black",
col = colorRampPalette(c("blue", "white", "red"))(200),
tl.cex = 1, # Ajusta el tamaño del texto de las etiquetas
number.cex = 0.6, # Ajusta el tamaño de los números
cl.cex = 1.2, # Ajusta el tamaño de la leyenda
mar = c(0, 0, 1, 0), # Ajusta los márgenes
is.corr = TRUE) # Indica que es una matriz de correlación
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
pca_model <- prcomp(selected_vars_pca,scale=TRUE)
summary(pca_model)
View(pca_model)
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
pca_model <- prcomp(selected_vars_pca,scale=TRUE)
scree_plot <- fviz_eig(pca_model, addlabels = TRUE, ylim = c(0, 50))
scree_plot
pca_model$rotation
pca_model$rotation[,1:3]
componentes <-  pca_model$rotation[,1:3]
kable(componentes, digits = 2)
View(pca_model)
library(readxl)
library(tidyverse)
library(knitr)
library(FactoMineR)
library(factoextra)
library(corrplot)
Df_Player <- read_excel("BBDD_Player.xlsx")
# Filtrado dado las condiciones del trabajo
Df_Player <- Df_Player %>% filter(GP >= max(GP)/2 & MIN/GP >= 8 & Season == "2023-24")
# Crear la nueva variable Age_Group
Df_Player <- Df_Player %>%
mutate(Age_Group = cut(Age,
breaks = c(min(Df_Player$Age), 25, 30, max(Df_Player$Age)),
labels =  c("Young Player", "Mid-Age Player", "Veteran Player"),
include.lowest = TRUE))
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
# Selección de variables para el PCA
Df_Player_PCA <- Df_Player %>%
select(Player, GP , PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
Df_Player_PCA <- Df_Player_PCA %>%
mutate(
PTS = round(PTS / GP,2),
AST = round(AST / GP,2),
REB = round(REB / GP,2),
STL = round(STL / GP,2),
BLK = round(BLK / GP,2),
TOV = round(TOV / GP,2))
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `3P%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
# Calcular la matriz de correlación
cor_matrix <- cor(selected_vars_pca, use = "complete.obs")
# Visualización de la matriz de correlación
corrplot(cor_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45, addCoef.col = "black",
col = colorRampPalette(c("blue", "white", "red"))(200),
tl.cex = 0.7,
number.cex = 0.6,
cl.cex = 1.2,
mar = c(0, 0, 1, 0),
is.corr = TRUE)
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
pca_model <- prcomp(selected_vars_pca,scale=TRUE)
scree_plot <- fviz_eig(pca_model, addlabels = TRUE, ylim = c(0, 50))
scree_plot
pca_model$x
predict(pca_model)
pca_model$rotation
selected_vars_pca <- Df_Player_PCA %>%
select(PTS, AST, REB, STL, BLK, TOV, `FG%`, `FT%`, `USG%`, PIE, `TS%`, `EFG%`)
pca_model <- princomp(selected_vars_pca,scale=TRUE)
scree_plot <- fviz_eig(pca_model, addlabels = TRUE, ylim = c(0, 50))
scree_plot
View(pca_model)
pca_model$scores
# Obtener las puntuaciones de los componentes principales
pca_scores <- as.data.frame(pca_model$scores)
# Verificar los loadings (vectores propios)
loadings <- pca_model$loadings
# Calcular la nueva variable artificial como una combinación ponderada de los tres primeros componentes principales
Rendimiento <- pca_scores[, 1] * loadings[, 1] + pca_scores[, 2] * loadings[, 2] + pca_scores[, 3] * loadings[, 3]
print(Rendimiento)
pca_scores[, 1]
loadings[, 1]
?princomp
View(pca_model)
pca_model$sdev
eigen_values <- cov(selected_vars_pca)
eigen_values
eigen_values <- eigen(cov(selected_vars_pca))
View(eigen_values)
eigen_values$values
?scale
eigen_values <- eigen(cov(scale(selected_vars_pca)))
eigen_values$values
sum(eigen_values$values)
pca_model$loadings
pca_model$loadings[, 1:3]
pca_model$loadings
View(pca_model)
pca_model[["loadings"]]
pca_model$loadings[1]
pca_model$loadings[,1]
pca_model$loadings[,c(1,2)]
eigen_values$values[1]
pca_model$rotation
pca_model$loadings
?princomp
componentes <-  pca_model$loadings[,1:3]
kable(componentes, digits = 2)
# Obtener las puntuaciones de los componentes principales
pca_scores <- as.data.frame(pca_model$scores)
# Calcular la nueva variable artificial como una combinación ponderada de los tres primeros componentes principales
Rendimiento <- pca_scores[, 1] * eigen_values$values[1] + pca_scores[, 2] * eigen_values$values[2] + pca_scores[, 3] * eigen_values$values[3]
# Crear un nuevo data frame con las variables deseadas
Df_Player_Cluster <- DfPlayerNBA %>%
select(Player, Position, Age_Group, Age) %>%
mutate(PC1 = pca_scores[, 1],
PC2 = pca_scores[, 2],
PC3 = pca_scores[, 3],
Rendimiento = Rendimiento)
# Obtener las puntuaciones de los componentes principales
pca_scores <- as.data.frame(pca_model$scores)
# Calcular la nueva variable artificial como una combinación ponderada de los tres primeros componentes principales
Rendimiento <- pca_scores[, 1] * eigen_values$values[1] + pca_scores[, 2] * eigen_values$values[2] + pca_scores[, 3] * eigen_values$values[3]
# Crear un nuevo data frame con las variables deseadas
Df_Player_Cluster <- Df_Player %>%
select(Player, Position, Age_Group, Age) %>%
mutate(PC1 = pca_scores[, 1],
PC2 = pca_scores[, 2],
PC3 = pca_scores[, 3],
Rendimiento = Rendimiento)
View(Df_Player_Cluster)
summary(Df_Player_Cluster$Rendimiento)
# Obtener las puntuaciones de los componentes principales
pca_scores <- as.data.frame(pca_model$scores)
# Calcular la nueva variable artificial como una combinación ponderada de los tres primeros componentes principales
Rendimiento <- pca_scores[, 1] * eigen_values$values[1] + pca_scores[, 2] * eigen_values$values[2] + pca_scores[, 3] * eigen_values$values[3]
# Crear un nuevo data frame con las variables deseadas
Df_Player_Cluster <- Df_Player %>%
select(Player, Position, Age_Group, Age) %>%
mutate(PC1 = pca_scores[, 1],
PC2 = pca_scores[, 2],
PC3 = pca_scores[, 3],
Rendimiento = Rendimiento)
summary_stats_rendimiento <- Df_Player_Cluster %>%
summarise(
N          = n(),
Media      = mean(Rendimiento),
D.Estándar = sd(Rendimiento),
Min        = min(Rendimiento),
Max        = max(Rendimiento),
Q1         = quantile(Rendimiento, 0.25),
Mediana    = median(Rendimiento),
Q3         = quantile(Rendimiento, 0.75)
)
kable(summary_stats_rendimiento, digits = 2)
